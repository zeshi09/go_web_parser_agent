// Code generated by ent, DO NOT EDIT.

package sociallink

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zeshi09/go_web_parser_agent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldURL, v))
}

// PageURL applies equality check predicate on the "page_url" field. It's identical to PageURLEQ.
func PageURL(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldPageURL, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldDomain, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldCreatedAt, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContainsFold(FieldURL, v))
}

// PageURLEQ applies the EQ predicate on the "page_url" field.
func PageURLEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldPageURL, v))
}

// PageURLNEQ applies the NEQ predicate on the "page_url" field.
func PageURLNEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldPageURL, v))
}

// PageURLIn applies the In predicate on the "page_url" field.
func PageURLIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldPageURL, vs...))
}

// PageURLNotIn applies the NotIn predicate on the "page_url" field.
func PageURLNotIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldPageURL, vs...))
}

// PageURLGT applies the GT predicate on the "page_url" field.
func PageURLGT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldPageURL, v))
}

// PageURLGTE applies the GTE predicate on the "page_url" field.
func PageURLGTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldPageURL, v))
}

// PageURLLT applies the LT predicate on the "page_url" field.
func PageURLLT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldPageURL, v))
}

// PageURLLTE applies the LTE predicate on the "page_url" field.
func PageURLLTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldPageURL, v))
}

// PageURLContains applies the Contains predicate on the "page_url" field.
func PageURLContains(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContains(FieldPageURL, v))
}

// PageURLHasPrefix applies the HasPrefix predicate on the "page_url" field.
func PageURLHasPrefix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasPrefix(FieldPageURL, v))
}

// PageURLHasSuffix applies the HasSuffix predicate on the "page_url" field.
func PageURLHasSuffix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasSuffix(FieldPageURL, v))
}

// PageURLEqualFold applies the EqualFold predicate on the "page_url" field.
func PageURLEqualFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEqualFold(FieldPageURL, v))
}

// PageURLContainsFold applies the ContainsFold predicate on the "page_url" field.
func PageURLContainsFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContainsFold(FieldPageURL, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContainsFold(FieldDomain, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SocialLink) predicate.SocialLink {
	return predicate.SocialLink(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SocialLink) predicate.SocialLink {
	return predicate.SocialLink(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SocialLink) predicate.SocialLink {
	return predicate.SocialLink(sql.NotPredicates(p))
}
