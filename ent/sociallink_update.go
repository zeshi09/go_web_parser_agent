// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zeshi09/go_web_parser_agent/ent/predicate"
	"github.com/zeshi09/go_web_parser_agent/ent/sociallink"
)

// SocialLinkUpdate is the builder for updating SocialLink entities.
type SocialLinkUpdate struct {
	config
	hooks    []Hook
	mutation *SocialLinkMutation
}

// Where appends a list predicates to the SocialLinkUpdate builder.
func (_u *SocialLinkUpdate) Where(ps ...predicate.SocialLink) *SocialLinkUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetURL sets the "url" field.
func (_u *SocialLinkUpdate) SetURL(v string) *SocialLinkUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *SocialLinkUpdate) SetNillableURL(v *string) *SocialLinkUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetDomain sets the "domain" field.
func (_u *SocialLinkUpdate) SetDomain(v string) *SocialLinkUpdate {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *SocialLinkUpdate) SetNillableDomain(v *string) *SocialLinkUpdate {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// ClearDomain clears the value of the "domain" field.
func (_u *SocialLinkUpdate) ClearDomain() *SocialLinkUpdate {
	_u.mutation.ClearDomain()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SocialLinkUpdate) SetCreatedAt(v time.Time) *SocialLinkUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SocialLinkUpdate) SetNillableCreatedAt(v *time.Time) *SocialLinkUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the SocialLinkMutation object of the builder.
func (_u *SocialLinkUpdate) Mutation() *SocialLinkMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SocialLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SocialLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SocialLinkUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SocialLinkUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SocialLinkUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sociallink.Table, sociallink.Columns, sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(sociallink.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(sociallink.FieldDomain, field.TypeString, value)
	}
	if _u.mutation.DomainCleared() {
		_spec.ClearField(sociallink.FieldDomain, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(sociallink.FieldCreatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sociallink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SocialLinkUpdateOne is the builder for updating a single SocialLink entity.
type SocialLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialLinkMutation
}

// SetURL sets the "url" field.
func (_u *SocialLinkUpdateOne) SetURL(v string) *SocialLinkUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *SocialLinkUpdateOne) SetNillableURL(v *string) *SocialLinkUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetDomain sets the "domain" field.
func (_u *SocialLinkUpdateOne) SetDomain(v string) *SocialLinkUpdateOne {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *SocialLinkUpdateOne) SetNillableDomain(v *string) *SocialLinkUpdateOne {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// ClearDomain clears the value of the "domain" field.
func (_u *SocialLinkUpdateOne) ClearDomain() *SocialLinkUpdateOne {
	_u.mutation.ClearDomain()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SocialLinkUpdateOne) SetCreatedAt(v time.Time) *SocialLinkUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SocialLinkUpdateOne) SetNillableCreatedAt(v *time.Time) *SocialLinkUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the SocialLinkMutation object of the builder.
func (_u *SocialLinkUpdateOne) Mutation() *SocialLinkMutation {
	return _u.mutation
}

// Where appends a list predicates to the SocialLinkUpdate builder.
func (_u *SocialLinkUpdateOne) Where(ps ...predicate.SocialLink) *SocialLinkUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SocialLinkUpdateOne) Select(field string, fields ...string) *SocialLinkUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SocialLink entity.
func (_u *SocialLinkUpdateOne) Save(ctx context.Context) (*SocialLink, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SocialLinkUpdateOne) SaveX(ctx context.Context) *SocialLink {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SocialLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SocialLinkUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SocialLinkUpdateOne) sqlSave(ctx context.Context) (_node *SocialLink, err error) {
	_spec := sqlgraph.NewUpdateSpec(sociallink.Table, sociallink.Columns, sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SocialLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sociallink.FieldID)
		for _, f := range fields {
			if !sociallink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sociallink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(sociallink.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(sociallink.FieldDomain, field.TypeString, value)
	}
	if _u.mutation.DomainCleared() {
		_spec.ClearField(sociallink.FieldDomain, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(sociallink.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &SocialLink{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sociallink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
