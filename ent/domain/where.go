// Code generated by ent, DO NOT EDIT.

package domain

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zeshi09/go_web_parser_agent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldID, id))
}

// LandingDomain applies equality check predicate on the "landing_domain" field. It's identical to LandingDomainEQ.
func LandingDomain(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldLandingDomain, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCreatedAt, v))
}

// LandingDomainEQ applies the EQ predicate on the "landing_domain" field.
func LandingDomainEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldLandingDomain, v))
}

// LandingDomainNEQ applies the NEQ predicate on the "landing_domain" field.
func LandingDomainNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldLandingDomain, v))
}

// LandingDomainIn applies the In predicate on the "landing_domain" field.
func LandingDomainIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldLandingDomain, vs...))
}

// LandingDomainNotIn applies the NotIn predicate on the "landing_domain" field.
func LandingDomainNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldLandingDomain, vs...))
}

// LandingDomainGT applies the GT predicate on the "landing_domain" field.
func LandingDomainGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldLandingDomain, v))
}

// LandingDomainGTE applies the GTE predicate on the "landing_domain" field.
func LandingDomainGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldLandingDomain, v))
}

// LandingDomainLT applies the LT predicate on the "landing_domain" field.
func LandingDomainLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldLandingDomain, v))
}

// LandingDomainLTE applies the LTE predicate on the "landing_domain" field.
func LandingDomainLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldLandingDomain, v))
}

// LandingDomainContains applies the Contains predicate on the "landing_domain" field.
func LandingDomainContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldLandingDomain, v))
}

// LandingDomainHasPrefix applies the HasPrefix predicate on the "landing_domain" field.
func LandingDomainHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldLandingDomain, v))
}

// LandingDomainHasSuffix applies the HasSuffix predicate on the "landing_domain" field.
func LandingDomainHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldLandingDomain, v))
}

// LandingDomainEqualFold applies the EqualFold predicate on the "landing_domain" field.
func LandingDomainEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldLandingDomain, v))
}

// LandingDomainContainsFold applies the ContainsFold predicate on the "landing_domain" field.
func LandingDomainContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldLandingDomain, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.NotPredicates(p))
}
