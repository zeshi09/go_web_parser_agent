// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/zeshi09/go_web_parser_agent/ent/sociallink"
)

// SocialLink is the model entity for the SocialLink schema.
type SocialLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Full social media URL
	URL string `json:"url,omitempty"`
	// Page URL where link was found
	PageURL string `json:"page_url,omitempty"`
	// Social media domain (t.me, vk.com, etc.)
	Domain string `json:"domain,omitempty"`
	// When this link was discovered
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SocialLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sociallink.FieldID:
			values[i] = new(sql.NullInt64)
		case sociallink.FieldURL, sociallink.FieldPageURL, sociallink.FieldDomain:
			values[i] = new(sql.NullString)
		case sociallink.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SocialLink fields.
func (_m *SocialLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sociallink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case sociallink.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case sociallink.FieldPageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_url", values[i])
			} else if value.Valid {
				_m.PageURL = value.String
			}
		case sociallink.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				_m.Domain = value.String
			}
		case sociallink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SocialLink.
// This includes values selected through modifiers, order, etc.
func (_m *SocialLink) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this SocialLink.
// Note that you need to call SocialLink.Unwrap() before calling this method if this SocialLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SocialLink) Update() *SocialLinkUpdateOne {
	return NewSocialLinkClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SocialLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SocialLink) Unwrap() *SocialLink {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SocialLink is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SocialLink) String() string {
	var builder strings.Builder
	builder.WriteString("SocialLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	builder.WriteString("page_url=")
	builder.WriteString(_m.PageURL)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(_m.Domain)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SocialLinks is a parsable slice of SocialLink.
type SocialLinks []*SocialLink
